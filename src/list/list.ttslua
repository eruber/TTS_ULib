--- Functions that operate on tables that are lists of items with no keys specified.
-- @module list
-- @author E.R. Uber

if not package.loaded['list'] then
    list = {}
    package.loaded['list'] = list

    -- >> list.concat

    --- Concatenate two list-like tables
    -- @tparam table list1 First list
    -- @tparam table list2 Second list
    -- @treturn table Concatenated list1
    list.concat = function(list1, list2)
        for i=1, #list2 do
            list1[#list1+1] = list2[i]
        end
    return list1
    end
    -- << list.concat

    -- >> list.slice
    --- Slice a table that looks like a list
    --
    --  Test:
    --      local a = {"green", "blue", "red", "purple"}
    --      local b = table.slice(a, 2, 3)
    --      print(a[1], a[2], a[3], a[4])
    --      print(b[1], b[2], b[3], b[4])
    --  Output:
    --      green blue red purple
    --      blue red nil nil
    -- @tparam table list A table that looks like a list
    -- @tparam int first Index of first item in list
    -- @tparam int last Index of last item in list
    -- @tparam int step Defaults to 1
    -- @treturn table Sliced table
    list.slice = function(list, first, last, step)
      local sliced = {}

      for i = first or 1, last or #tbl, step or 1 do
        sliced[#sliced+1] = tbl[i]
      end

      return sliced
    end
    -- << list.slice

    -- >> list.set

    --- Transform a list into a boolean set - used in itemsInList()
    -- @tparam table list A list-like table
    -- @treturn table A boolean table keyed by list items values of true
    list.set = function(list)
        -- See: http://www.lua.org/pil/11.5.html
        local set = {}
        for _, l in ipairs(list) do set[l] = true end
        return set
    end
    -- << list.set

    -- >> list.itemIsInList

    --- Determine if item is in list
    -- @param item An item that might be in the list
    -- @param list A list-like table
    -- @return true if item is in list; false otherwise.
    list.itemIsInList = function(item, list)
        local list_set = list.set(list)
        return list_set[item] or false
    end
    -- << list.itemIsInList

end

