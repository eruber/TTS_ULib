--- Functions that operate on tables that are lists of items with no keys specified.
-- @module lists
-- @contributor eruber
-- @contributor onelivesleft
-- @curator eruber

if not package.loaded['lists'] then
    lists = {}
    package.loaded['lists'] = lists

    --- Concatenate two list-like tables
    -- @tparam table list1 First list
    -- @tparam table list2 Second list
    -- @treturn table Concatenated list1
    lists.concat = function(list1, list2)
        for i=1, #list2 do
            list1[#list1+1] = list2[i]
        end
    return list1
    end

    --- Slice a table that looks like a list
    --
    --  Test:
    --      local a = {"green", "blue", "red", "purple"}
    --      local b = table.slice(a, 2, 3)
    --      print(a[1], a[2], a[3], a[4])
    --      print(b[1], b[2], b[3], b[4])
    --  Output:
    --      green blue red purple
    --      blue red nil nil
    -- @tparam table list A table that looks like a list
    -- @tparam int first Index of first item in list
    -- @tparam int last Index of last item in list
    -- @tparam int step Defaults to 1
    -- @treturn table Sliced table
    lists.slice = function(list, first, last, step)
      local sliced = {}

      for i = first or 1, last or #tbl, step or 1 do
        sliced[#sliced+1] = tbl[i]
      end

      return sliced
    end

    --- Transform a list into a boolean set - used in itemsInList()
    -- @tparam table list A list-like table
    -- @treturn table A boolean table keyed by list items values of true
    lists.set = function(list)
        -- See: http://www.lua.org/pil/11.5.html
        local set = {}
        for _, l in ipairs(list) do set[l] = true end
        return set
    end

    --- Determine if item is in list
    -- @param item An item that might be in the list
    -- @param list A list-like table
    -- @return true if item is in list; false otherwise.
    lists.itemIsInList = function(item, list)
        local list_set = list.set(list)
        return list_set[item] or false
    end

    --- Apply a function, func, to all items in a list.
    -- For each value in list, call func passing it the value.
    -- Keep the func return value in a mapped table to return.
    -- @param list A list to map
    -- @param func A function to call for each value in list
    -- @return A table of func returns for each item in list
    function lists.map(list, func)
        -- from onelivesleft utils fn module
        -- https://github.com/onelivesleft/Utils/blob/master/fn.ttslua
        local mapped = {}
        for k, v in pairs(list) do
            mapped[k] = func(v)
        end
        return mapped
    end

    --- Filter a list by calling a function, func, that returns true for those
    -- items to keep in the list.
    -- @param list A list to filter
    -- @param func A function to call for each value in list that returns true or false
    -- @return A filtered list with items for which func returned true
    function lists.filter(list, func)
        -- from onelivesleft utils fn module
        -- https://github.com/onelivesleft/Utils/blob/master/fn.ttslua
        local filtered = {}
        for k, v in pairs(list) do
            if func(v) then
                filtered[k] = v
            end
        end
        return filtered
    end

    --- Reduce a list by calling a function, func, that performs a computation on a list
    -- and returns the result by applying a rolling computation to sequential pairs of
    -- values in a list -- this process is referred to as a reduction, or to reduce, the list.
    -- @param list A list to reduce
    -- @param func A function to call for each item in the list
    -- @param initial An optional initial value for the reduction
    -- @return The reduction value
    function lists.reduce(list, func, initial)
        -- from onelivesleft utils fn module
        -- https://github.com/onelivesleft/Utils/blob/master/fn.ttslua
        local reduced = initial
        if reduced == nil then reduced = 0 end
        for k, v in pairs(list) do
            reduced = func(reduced, v)
        end
        return reduced
    end

end

